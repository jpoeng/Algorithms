=begin

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.

#==============================================================================================
Pseudocode

Input: range of numbers up to 4 million
Output: sum of all even-valued fibonacci terms
Create empty container object called even_fibonnaci_numbers
FOR each number in range
  IF number is a perfect square AND divisible by 2
    add number to even_fibonacci_numbers
  END IF
END FOR
return the sum of even_fibonacci_numbers

Notes:
Use Binet's formula to check if a number 'x' is fibonnaci:
(5x^2 + 4) or (5x^2 - 4), where one or both returns a perfect square

=end
#==============================================================================================
# Initial Solution:
range=(1..4000000)
even_fibonacci_numbers = []

for i in range
  # First test
  first = (5*(i*i) - 4)**0.5
  # Second test
  second = (5*(i*i) + 4)**0.5

  if (first/first.floor == 1 || second/second.floor == 1) &&
    i%2 == 0
    even_fibonacci_numbers << i
  end
end

p  even_fibonacci_numbers.inject { |sum, num| sum+=num }

#==============================================================================================
# Refactored Solution

def fibonacci?(value)
  first = (5*(value*value) - 4)**0.5
  second = (5*(value*value) + 4)**0.5
  first/first.round == 1 || second/second.round == 1
end

def sum_even_fibonacci_numbers(range)
even_fibonacci_numbers = []
  for i in range
    even_fibonacci_numbers<<i if fibonacci?(i) && i%2 == 0
  end
  sum = even_fibonacci_numbers.inject { |sum, num| sum+=num }
end

#==============================================================================================
# DRIVER TESTS

range=(1..4000000)

p fibonacci?(1) == true
p fibonacci?(3) == true
p fibonacci?(5) == true
p fibonacci?(6) == false
p fibonacci?(33) == false
p sum_even_fibonacci_numbers(range) == 4613732